"""All input for the create `Player` mutation."""
input CreatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Player` to be created by this mutation."""
  player: PlayerInput!
}

"""The output of our create `Player` mutation."""
type CreatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was created by this mutation."""
  player: Player

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PlayersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `_PrismaMigration` mutation."""
input CreatePrismaMigrationInput {
  """The `_PrismaMigration` to be created by this mutation."""
  _prismaMigration: _PrismaMigrationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `_PrismaMigration` mutation."""
type CreatePrismaMigrationPayload {
  """The `_PrismaMigration` that was created by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TestPlayer` mutation."""
input CreateTestPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TestPlayer` to be created by this mutation."""
  testPlayer: TestPlayerInput!
}

"""The output of our create `TestPlayer` mutation."""
type CreateTestPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TestPlayer` that was created by this mutation."""
  testPlayer: TestPlayer

  """An edge for our `TestPlayer`. May be used by Relay 1."""
  testPlayerEdge(
    """The method to use when ordering `TestPlayer`."""
    orderBy: [TestPlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TestPlayersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deletePlayerById` mutation."""
input DeletePlayerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePlayer` mutation."""
input DeletePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Player` mutation."""
type DeletePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlayerId: ID

  """The `Player` that was deleted by this mutation."""
  player: Player

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PlayersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePrismaMigrationById` mutation."""
input DeletePrismaMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deletePrismaMigration` mutation."""
input DeletePrismaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_PrismaMigration` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `_PrismaMigration` mutation."""
type DeletePrismaMigrationPayload {
  """The `_PrismaMigration` that was deleted by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPrismaMigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTestPlayerById` mutation."""
input DeleteTestPlayerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTestPlayer` mutation."""
input DeleteTestPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TestPlayer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TestPlayer` mutation."""
type DeleteTestPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTestPlayerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TestPlayer` that was deleted by this mutation."""
  testPlayer: TestPlayer

  """An edge for our `TestPlayer`. May be used by Relay 1."""
  testPlayerEdge(
    """The method to use when ordering `TestPlayer`."""
    orderBy: [TestPlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TestPlayersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Player`."""
  createPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerInput!
  ): CreatePlayerPayload

  """Creates a single `_PrismaMigration`."""
  createPrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePrismaMigrationInput!
  ): CreatePrismaMigrationPayload

  """Creates a single `TestPlayer`."""
  createTestPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTestPlayerInput!
  ): CreateTestPlayerPayload

  """Deletes a single `Player` using its globally unique id."""
  deletePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerInput!
  ): DeletePlayerPayload

  """Deletes a single `Player` using a unique key."""
  deletePlayerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerByIdInput!
  ): DeletePlayerPayload

  """Deletes a single `_PrismaMigration` using its globally unique id."""
  deletePrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrismaMigrationInput!
  ): DeletePrismaMigrationPayload

  """Deletes a single `_PrismaMigration` using a unique key."""
  deletePrismaMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrismaMigrationByIdInput!
  ): DeletePrismaMigrationPayload

  """Deletes a single `TestPlayer` using its globally unique id."""
  deleteTestPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestPlayerInput!
  ): DeleteTestPlayerPayload

  """Deletes a single `TestPlayer` using a unique key."""
  deleteTestPlayerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTestPlayerByIdInput!
  ): DeleteTestPlayerPayload

  """Updates a single `Player` using its globally unique id and a patch."""
  updatePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerInput!
  ): UpdatePlayerPayload

  """Updates a single `Player` using a unique key and a patch."""
  updatePlayerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerByIdInput!
  ): UpdatePlayerPayload

  """
  Updates a single `_PrismaMigration` using its globally unique id and a patch.
  """
  updatePrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrismaMigrationInput!
  ): UpdatePrismaMigrationPayload

  """Updates a single `_PrismaMigration` using a unique key and a patch."""
  updatePrismaMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrismaMigrationByIdInput!
  ): UpdatePrismaMigrationPayload

  """
  Updates a single `TestPlayer` using its globally unique id and a patch.
  """
  updateTestPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestPlayerInput!
  ): UpdateTestPlayerPayload

  """Updates a single `TestPlayer` using a unique key and a patch."""
  updateTestPlayerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTestPlayerByIdInput!
  ): UpdateTestPlayerPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Player implements Node {
  id: Int!
  lastseen: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
  uuid: String!
}

"""
A condition to be used against `Player` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlayerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastseen` field."""
  lastseen: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: String
}

"""An input for mutations affecting `Player`"""
input PlayerInput {
  id: Int
  lastseen: Datetime
  username: String
  uuid: String!
}

"""
Represents an update to a `Player`. Fields that are set will be updated.
"""
input PlayerPatch {
  id: Int
  lastseen: Datetime
  username: String
  uuid: String
}

"""A connection to a list of `Player` values."""
type PlayersConnection {
  """
  A list of edges which contains the `Player` and cursor to aid in pagination.
  """
  edges: [PlayersEdge!]!

  """A list of `Player` objects."""
  nodes: [Player!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Player` you could get from the connection."""
  totalCount: Int!
}

"""A `Player` edge in the connection."""
type PlayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Player` at the end of the edge."""
  node: Player!
}

"""Methods to use when ordering `Player`."""
enum PlayersOrderBy {
  ID_ASC
  ID_DESC
  LASTSEEN_ASC
  LASTSEEN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  UUID_ASC
  UUID_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a single `_PrismaMigration` using its globally unique `ID`."""
  _prismaMigration(
    """
    The globally unique `ID` to be used in selecting a single `_PrismaMigration`.
    """
    nodeId: ID!
  ): _PrismaMigration

  """Get a single `_PrismaMigration`."""
  _prismaMigrationById(id: String!): _PrismaMigration

  """Reads and enables pagination through a set of `Player`."""
  allPlayers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlayersConnection

  """Reads a set of `Player`."""
  allPlayersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]
  ): [Player!]

  """Reads and enables pagination through a set of `_PrismaMigration`."""
  allPrismaMigrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _PrismaMigrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsConnection

  """Reads a set of `_PrismaMigration`."""
  allPrismaMigrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _PrismaMigrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]
  ): [_PrismaMigration!]

  """Reads and enables pagination through a set of `TestPlayer`."""
  allTestPlayers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestPlayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TestPlayer`."""
    orderBy: [TestPlayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TestPlayersConnection

  """Reads a set of `TestPlayer`."""
  allTestPlayersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestPlayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TestPlayer`."""
    orderBy: [TestPlayersOrderBy!]
  ): [TestPlayer!]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads a single `Player` using its globally unique `ID`."""
  player(
    """The globally unique `ID` to be used in selecting a single `Player`."""
    nodeId: ID!
  ): Player

  """Get a single `Player`."""
  playerById(id: Int!): Player

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `TestPlayer` using its globally unique `ID`."""
  testPlayer(
    """
    The globally unique `ID` to be used in selecting a single `TestPlayer`.
    """
    nodeId: ID!
  ): TestPlayer

  """Get a single `TestPlayer`."""
  testPlayerById(id: Int!): TestPlayer
}

type TestPlayer implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
  uuid: String!
}

"""
A condition to be used against `TestPlayer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TestPlayerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: String
}

"""An input for mutations affecting `TestPlayer`"""
input TestPlayerInput {
  id: Int
  username: String
  uuid: String
}

"""
Represents an update to a `TestPlayer`. Fields that are set will be updated.
"""
input TestPlayerPatch {
  id: Int
  username: String
  uuid: String
}

"""A connection to a list of `TestPlayer` values."""
type TestPlayersConnection {
  """
  A list of edges which contains the `TestPlayer` and cursor to aid in pagination.
  """
  edges: [TestPlayersEdge!]!

  """A list of `TestPlayer` objects."""
  nodes: [TestPlayer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TestPlayer` you could get from the connection."""
  totalCount: Int!
}

"""A `TestPlayer` edge in the connection."""
type TestPlayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TestPlayer` at the end of the edge."""
  node: TestPlayer!
}

"""Methods to use when ordering `TestPlayer`."""
enum TestPlayersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  UUID_ASC
  UUID_DESC
}

"""All input for the `updatePlayerById` mutation."""
input UpdatePlayerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  playerPatch: PlayerPatch!
}

"""All input for the `updatePlayer` mutation."""
input UpdatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  playerPatch: PlayerPatch!
}

"""The output of our update `Player` mutation."""
type UpdatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was updated by this mutation."""
  player: Player

  """An edge for our `Player`. May be used by Relay 1."""
  playerEdge(
    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PlayersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePrismaMigrationById` mutation."""
input UpdatePrismaMigrationByIdInput {
  """
  An object where the defined keys will be set on the `_PrismaMigration` being updated.
  """
  _prismaMigrationPatch: _PrismaMigrationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `updatePrismaMigration` mutation."""
input UpdatePrismaMigrationInput {
  """
  An object where the defined keys will be set on the `_PrismaMigration` being updated.
  """
  _prismaMigrationPatch: _PrismaMigrationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_PrismaMigration` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `_PrismaMigration` mutation."""
type UpdatePrismaMigrationPayload {
  """The `_PrismaMigration` that was updated by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTestPlayerById` mutation."""
input UpdateTestPlayerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `TestPlayer` being updated.
  """
  testPlayerPatch: TestPlayerPatch!
}

"""All input for the `updateTestPlayer` mutation."""
input UpdateTestPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TestPlayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TestPlayer` being updated.
  """
  testPlayerPatch: TestPlayerPatch!
}

"""The output of our update `TestPlayer` mutation."""
type UpdateTestPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TestPlayer` that was updated by this mutation."""
  testPlayer: TestPlayer

  """An edge for our `TestPlayer`. May be used by Relay 1."""
  testPlayerEdge(
    """The method to use when ordering `TestPlayer`."""
    orderBy: [TestPlayersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TestPlayersEdge
}

type _PrismaMigration implements Node {
  appliedStepsCount: Int!
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rolledBackAt: Datetime
  startedAt: Datetime!
}

"""
A condition to be used against `_PrismaMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _PrismaMigrationCondition {
  """Checks for equality with the object’s `appliedStepsCount` field."""
  appliedStepsCount: Int

  """Checks for equality with the object’s `checksum` field."""
  checksum: String

  """Checks for equality with the object’s `finishedAt` field."""
  finishedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `logs` field."""
  logs: String

  """Checks for equality with the object’s `migrationName` field."""
  migrationName: String

  """Checks for equality with the object’s `rolledBackAt` field."""
  rolledBackAt: Datetime

  """Checks for equality with the object’s `startedAt` field."""
  startedAt: Datetime
}

"""An input for mutations affecting `_PrismaMigration`"""
input _PrismaMigrationInput {
  appliedStepsCount: Int
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""
Represents an update to a `_PrismaMigration`. Fields that are set will be updated.
"""
input _PrismaMigrationPatch {
  appliedStepsCount: Int
  checksum: String
  finishedAt: Datetime
  id: String
  logs: String
  migrationName: String
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""A connection to a list of `_PrismaMigration` values."""
type _PrismaMigrationsConnection {
  """
  A list of edges which contains the `_PrismaMigration` and cursor to aid in pagination.
  """
  edges: [_PrismaMigrationsEdge!]!

  """A list of `_PrismaMigration` objects."""
  nodes: [_PrismaMigration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_PrismaMigration` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_PrismaMigration` edge in the connection."""
type _PrismaMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_PrismaMigration` at the end of the edge."""
  node: _PrismaMigration!
}

"""Methods to use when ordering `_PrismaMigration`."""
enum _PrismaMigrationsOrderBy {
  APPLIED_STEPS_COUNT_ASC
  APPLIED_STEPS_COUNT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  FINISHED_AT_ASC
  FINISHED_AT_DESC
  ID_ASC
  ID_DESC
  LOGS_ASC
  LOGS_DESC
  MIGRATION_NAME_ASC
  MIGRATION_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLLED_BACK_AT_ASC
  ROLLED_BACK_AT_DESC
  STARTED_AT_ASC
  STARTED_AT_DESC
}
